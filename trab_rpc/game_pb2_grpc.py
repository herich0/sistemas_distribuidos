# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import game_pb2 as game__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in game_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class GameServerStub(object):
    """O serviço principal que o servidor implementará
    --- Funções do Lobby ---
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLobbies = channel.unary_unary(
                '/game.GameServer/GetLobbies',
                request_serializer=game__pb2.Empty.SerializeToString,
                response_deserializer=game__pb2.LobbyList.FromString,
                _registered_method=True)
        self.CreateRoom = channel.unary_unary(
                '/game.GameServer/CreateRoom',
                request_serializer=game__pb2.CreateRoomRequest.SerializeToString,
                response_deserializer=game__pb2.RoomInfo.FromString,
                _registered_method=True)
        self.JoinRoom = channel.unary_unary(
                '/game.GameServer/JoinRoom',
                request_serializer=game__pb2.JoinRoomRequest.SerializeToString,
                response_deserializer=game__pb2.RoomInfo.FromString,
                _registered_method=True)
        self.MakeMove = channel.unary_unary(
                '/game.GameServer/MakeMove',
                request_serializer=game__pb2.MoveRequest.SerializeToString,
                response_deserializer=game__pb2.MoveResponse.FromString,
                _registered_method=True)
        self.SubscribeToGameUpdates = channel.unary_stream(
                '/game.GameServer/SubscribeToGameUpdates',
                request_serializer=game__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=game__pb2.GameState.FromString,
                _registered_method=True)


class GameServerServicer(object):
    """O serviço principal que o servidor implementará
    --- Funções do Lobby ---
    """

    def GetLobbies(self, request, context):
        """Cliente pede a lista de salas disponíveis
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRoom(self, request, context):
        """Cliente cria uma nova sala e se torna o "host"
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JoinRoom(self, request, context):
        """Cliente entra em uma sala existente
        Retorna um erro se a sala estiver cheia ou não existir
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MakeMove(self, request, context):
        """--- Funções do Jogo ---

        Cliente (jogador) faz uma jogada
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToGameUpdates(self, request, context):
        """Cliente se "inscreve" para receber atualizações do jogo em tempo real.
        O servidor "empurra" (stream) o estado do jogo para os dois jogadores
        sempre que algo acontece (alguém joga, o turno muda, etc.)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GameServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLobbies': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLobbies,
                    request_deserializer=game__pb2.Empty.FromString,
                    response_serializer=game__pb2.LobbyList.SerializeToString,
            ),
            'CreateRoom': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRoom,
                    request_deserializer=game__pb2.CreateRoomRequest.FromString,
                    response_serializer=game__pb2.RoomInfo.SerializeToString,
            ),
            'JoinRoom': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinRoom,
                    request_deserializer=game__pb2.JoinRoomRequest.FromString,
                    response_serializer=game__pb2.RoomInfo.SerializeToString,
            ),
            'MakeMove': grpc.unary_unary_rpc_method_handler(
                    servicer.MakeMove,
                    request_deserializer=game__pb2.MoveRequest.FromString,
                    response_serializer=game__pb2.MoveResponse.SerializeToString,
            ),
            'SubscribeToGameUpdates': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToGameUpdates,
                    request_deserializer=game__pb2.SubscribeRequest.FromString,
                    response_serializer=game__pb2.GameState.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'game.GameServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('game.GameServer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GameServer(object):
    """O serviço principal que o servidor implementará
    --- Funções do Lobby ---
    """

    @staticmethod
    def GetLobbies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game.GameServer/GetLobbies',
            game__pb2.Empty.SerializeToString,
            game__pb2.LobbyList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateRoom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game.GameServer/CreateRoom',
            game__pb2.CreateRoomRequest.SerializeToString,
            game__pb2.RoomInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def JoinRoom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game.GameServer/JoinRoom',
            game__pb2.JoinRoomRequest.SerializeToString,
            game__pb2.RoomInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MakeMove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game.GameServer/MakeMove',
            game__pb2.MoveRequest.SerializeToString,
            game__pb2.MoveResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeToGameUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/game.GameServer/SubscribeToGameUpdates',
            game__pb2.SubscribeRequest.SerializeToString,
            game__pb2.GameState.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
